// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture1: { value: white }
        texture2: { value: white }
        texture3: { value: white }
        texture4: { value: white }
        alphaThreshold: { value: 0.5 }
        instanceDataTexture: { value: white }
        instanceDataTextureSize: { value: [1, 1] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  #define PI 3.14159265359
  #define PI2 6.28318530718
  #define PI_H 1.570796326795

  uniform TextureData {vec2 instanceDataTextureSize;};
  uniform sampler2D instanceDataTexture;
  #if CC_INSTANCE_TEXTURE_FLOAT32
    mat4 getDataMatrix(const in float i) {
      float width = instanceDataTextureSize.x;
      float height = instanceDataTextureSize.y;
      float j = i * 4.0;
      float x = mod(j, width);
      float y = floor(j / width);

      float dx = 1.0 / width;
      float dy = 1.0 / height;

      y = dy * (y + 0.5);

      vec4 v1 = texture(instanceDataTexture, vec2(dx * (x + 0.5), y));
      vec4 v2 = texture(instanceDataTexture, vec2(dx * (x + 1.5), y));
      vec4 v3 = texture(instanceDataTexture, vec2(dx * (x + 2.5), y));
      vec4 v4 = texture(instanceDataTexture, vec2(dx * (x + 3.5), y));

      return mat4(v1, v2, v3, v4);
    }
  #else
    float decode32(vec4 rgba) {
      float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;
      float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;
      float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;
      return Sign * exp2(Exponent - 23.0) * Mantissa;
    }
    vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {
      // TODO: check this on big endian devices
      return vec4(
        decode32(x.wzyx * 255.0),
        decode32(y.wzyx * 255.0),
        decode32(z.wzyx * 255.0),
        decode32(w.wzyx * 255.0)
      );
    }

    vec4 decodevec4 (float dx, float x, float y) {
      return decodevec4(
        texture(instanceDataTexture, vec2(dx * (x + 0.5), y)),
        texture(instanceDataTexture, vec2(dx * (x + 1.5), y)),
        texture(instanceDataTexture, vec2(dx * (x + 2.5), y)),
        texture(instanceDataTexture, vec2(dx * (x + 3.5), y))
      );
    }

    mat4 getDataMatrix(const in float i) {
      float width = instanceDataTextureSize.x;
      float height = instanceDataTextureSize.y;
      float j = i * 16.0;
      float x = mod(j, width);
      float y = floor(j / width);

      float dx = 1.0 / width;
      float dy = 1.0 / height;

      y = dy * (y + 0.5);

      vec4 v1 = decodevec4(dx, x,       y);
      vec4 v2 = decodevec4(dx, x+4.0,   y);
      vec4 v3 = decodevec4(dx, x+8.0,   y);
      vec4 v4 = decodevec4(dx, x+12.0,  y);

      return mat4(v1, v2, v3, v4);
    }
  #endif

  float COS_PI2 = cos(PI2);
  float SIN_PI2 = sin(PI2);

  in float a_block_idx;
  out float v_texture_id;

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  // #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  // #endif

  struct Mat23 {
    float a;
    float b;
    float c;
    float d;
    float tx;
    float ty;
  };

  Mat23 mat23Mul (Mat23 a, Mat23 b) {
    Mat23 res;

    res.a = b.a * a.a + b.b * a.c;
    res.b = b.a * a.b + b.b * a.d;
    res.c = b.c * a.a + b.d * a.c;
    res.d = b.c * a.b + b.d * a.d;
    res.tx = a.a * b.tx + a.c * b.ty + a.tx;
    res.ty = a.b * b.tx + a.d * b.ty + a.ty;

    return res;
  }

  vec2 mat23Mul (Mat23 mat, vec2 pos) {
    return vec2(
      mat.a * pos.x + mat.b * pos.y + mat.tx,
      mat.c * pos.x + mat.d * pos.y + mat.ty
    );
  }

  void main () {
    mat4 mat = getDataMatrix(a_block_idx);
    vec4 a_uv_matrix = mat[0]; // v1
    vec4 a_pos_local = mat[1]; // v2
    vec4 a_pos_rotate_scale = mat[2]; // v3
    vec2 a_pos_translate = mat[3].xy; // v4[x] v4[y]
    float a_uv_rotate = mat[3].z; // v4[z]

    v_texture_id = mat[3].w; // v4[w]

    // pos is one of [0,0] [0,1] [1,0] [1,1]
    vec4 pos = vec4(a_position, 1);

    // local transform
    Mat23 local = Mat23(a_pos_local[2] - a_pos_local[0], 0., 0., a_pos_local[3] - a_pos_local[1], a_pos_local[0], a_pos_local[1]);
    // world transform
    Mat23 world = Mat23(a_pos_rotate_scale[0], a_pos_rotate_scale[1], a_pos_rotate_scale[2], a_pos_rotate_scale[3], a_pos_translate[0], a_pos_translate[1]);
    // combine
    Mat23 res = mat23Mul(world, local);
    // mat4 matWorld = mat4(
    //   res.a, res.b, 0, 0,
    //   res.c, res.d, 0, 0,
    //   0, 0, 1, 0,
    //   res.tx, res.ty, 0, 1
    // );
    // // final
    // pos = cc_matViewProj * matWorld * pos;

    pos.xy = mat23Mul(res, pos.xy);
    pos = cc_matViewProj * pos;

    // #if USE_TEXTURE

    // method 1.
    // float cosUv = cos(a_uv_rotate * PI_H);
    // float sinUv = sin(a_uv_rotate * PI_H);
    // Mat23 matUV = Mat23(
    //   cosUv, -sinUv,
    //   sinUv, cosUv,
    //   0., 0.
    // );
    // vec2 uvPos = mat23Mul(matUV, a_position.xy);
    // uvPos.x -= step(1., a_uv_rotate) * 2. * uvPos.x;

    // v_uv0 = a_uv_matrix.xy + (a_uv_matrix.zw - a_uv_matrix.xy) * uvPos;

    // method 2.
    float uvRotate = floor(a_uv_rotate + 0.5);
    if (uvRotate == 0.) {
      v_uv0 = a_uv_matrix.xy + (a_uv_matrix.zw - a_uv_matrix.xy) * a_position.xy;
    }
    else {
      v_uv0 = a_uv_matrix.xy + (a_uv_matrix.zw - a_uv_matrix.xy) * a_position.yx;
    }

    // #endif

    v_color = a_color;
    // v_texture_id = a_texture_id;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  // #if USE_TEXTURE
  in float v_texture_id;
  in vec2 v_uv0;
  uniform sampler2D texture1;
  uniform sampler2D texture2;
  uniform sampler2D texture3;
  uniform sampler2D texture4;
  // #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    float textureId = floor(v_texture_id + 0.5);

    // #if USE_TEXTURE
    #if TEXTURE_LEVEL > 0
    if (textureId == 1.) { // fix iOS wechat round-off error
      CCTexture(texture1, v_uv0, o);
    }
    else if (textureId == 2.) {
      CCTexture(texture2, v_uv0, o);
    }
    #endif
    #if TEXTURE_LEVEL > 1
    else if (textureId == 3.) {
      CCTexture(texture3, v_uv0, o);
    }
    else if (textureId == 4) {
      CCTexture(texture4, v_uv0, o);
    }
    #endif
    // #endif

    // o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
