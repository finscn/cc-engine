{
  "ver": "1.0.25",
  "uuid": "ad4f4c3a-1dcc-4449-aa6a-4ceda96f867e",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec2 instanceDataTextureSize;\nuniform sampler2D instanceDataTexture;\n#if CC_INSTANCE_TEXTURE_FLOAT32\n  mat4 getDataMatrix(const in float i) {\n    float width = instanceDataTextureSize.x;\n    float height = instanceDataTextureSize.y;\n    float j = i * 4.0;\n    float x = mod(j, width);\n    float y = floor(j / width);\n    float dx = 1.0 / width;\n    float dy = 1.0 / height;\n    y = dy * (y + 0.5);\n    vec4 v1 = texture2D(instanceDataTexture, vec2(dx * (x + 0.5), y));\n    vec4 v2 = texture2D(instanceDataTexture, vec2(dx * (x + 1.5), y));\n    vec4 v3 = texture2D(instanceDataTexture, vec2(dx * (x + 2.5), y));\n    vec4 v4 = texture2D(instanceDataTexture, vec2(dx * (x + 3.5), y));\n    return mat4(v1, v2, v3, v4);\n  }\n#else\n  float decode32(vec4 rgba) {\n    float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n    float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n    float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n    return Sign * exp2(Exponent - 23.0) * Mantissa;\n  }\n  vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n    return vec4(\n      decode32(x.wzyx * 255.0),\n      decode32(y.wzyx * 255.0),\n      decode32(z.wzyx * 255.0),\n      decode32(w.wzyx * 255.0)\n    );\n  }\n  vec4 decodevec4 (float dx, float x, float y) {\n    return decodevec4(\n      texture2D(instanceDataTexture, vec2(dx * (x + 0.5), y)),\n      texture2D(instanceDataTexture, vec2(dx * (x + 1.5), y)),\n      texture2D(instanceDataTexture, vec2(dx * (x + 2.5), y)),\n      texture2D(instanceDataTexture, vec2(dx * (x + 3.5), y))\n    );\n  }\n  mat4 getDataMatrix(const in float i) {\n    float width = instanceDataTextureSize.x;\n    float height = instanceDataTextureSize.y;\n    float j = i * 16.0;\n    float x = mod(j, width);\n    float y = floor(j / width);\n    float dx = 1.0 / width;\n    float dy = 1.0 / height;\n    y = dy * (y + 0.5);\n    vec4 v1 = decodevec4(dx, x,       y);\n    vec4 v2 = decodevec4(dx, x+4.0,   y);\n    vec4 v3 = decodevec4(dx, x+8.0,   y);\n    vec4 v4 = decodevec4(dx, x+12.0,  y);\n    return mat4(v1, v2, v3, v4);\n  }\n#endif\nfloat COS_PI2 = cos(6.28318530718);\nfloat SIN_PI2 = sin(6.28318530718);\nattribute float a_block_idx;\nvarying float v_texture_id;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nstruct Mat23 {\n  float a;\n  float b;\n  float c;\n  float d;\n  float tx;\n  float ty;\n};\nMat23 mat23Mul (Mat23 a, Mat23 b) {\n  Mat23 res;\n  res.a = b.a * a.a + b.b * a.c;\n  res.b = b.a * a.b + b.b * a.d;\n  res.c = b.c * a.a + b.d * a.c;\n  res.d = b.c * a.b + b.d * a.d;\n  res.tx = a.a * b.tx + a.c * b.ty + a.tx;\n  res.ty = a.b * b.tx + a.d * b.ty + a.ty;\n  return res;\n}\nvec2 mat23Mul (Mat23 mat, vec2 pos) {\n  return vec2(\n    mat.a * pos.x + mat.b * pos.y + mat.tx,\n    mat.c * pos.x + mat.d * pos.y + mat.ty\n  );\n}\nvoid main () {\n  mat4 mat = getDataMatrix(a_block_idx);\n  vec4 a_uv_matrix = mat[0];\n  vec4 a_pos_local = mat[1];\n  vec4 a_pos_rotate_scale = mat[2];\n  vec2 a_pos_translate = mat[3].xy;\n  float a_uv_rotate = mat[3].z;\n  v_texture_id = mat[3].w;\n  vec4 pos = vec4(a_position, 1);\n  Mat23 local = Mat23(a_pos_local[2] - a_pos_local[0], 0., 0., a_pos_local[3] - a_pos_local[1], a_pos_local[0], a_pos_local[1]);\n  Mat23 world = Mat23(a_pos_rotate_scale[0], a_pos_rotate_scale[1], a_pos_rotate_scale[2], a_pos_rotate_scale[3], a_pos_translate[0], a_pos_translate[1]);\n  Mat23 res = mat23Mul(world, local);\n  pos.xy = mat23Mul(res, pos.xy);\n  pos = cc_matViewProj * pos;\n  float uvRotate = floor(a_uv_rotate + 0.5);\n  if (uvRotate == 0.) {\n    v_uv0 = a_uv_matrix.xy + (a_uv_matrix.zw - a_uv_matrix.xy) * a_position.xy;\n  }\n  else {\n    v_uv0 = a_uv_matrix.xy + (a_uv_matrix.zw - a_uv_matrix.xy) * a_position.yx;\n  }\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying float v_texture_id;\nvarying vec2 v_uv0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float textureId = floor(v_texture_id + 0.5);\n  #if TEXTURE_LEVEL > 0\n  if (textureId == 1.) {\n  vec4 texture1_tmp = texture2D(texture1, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture1\n      texture1_tmp.a *= texture2D(texture1, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture1_tmp.rgb * texture1_tmp.rgb);\n    o.a *= texture1_tmp.a;\n  #else\n    o *= texture1_tmp;\n  #endif\n  }\n  else if (textureId == 2.) {\n  vec4 texture2_tmp = texture2D(texture2, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture2\n      texture2_tmp.a *= texture2D(texture2, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture2_tmp.rgb * texture2_tmp.rgb);\n    o.a *= texture2_tmp.a;\n  #else\n    o *= texture2_tmp;\n  #endif\n  }\n  #endif\n  #if TEXTURE_LEVEL > 1\n  else if (textureId == 3.) {\n  vec4 texture3_tmp = texture2D(texture3, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture3\n      texture3_tmp.a *= texture2D(texture3, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture3_tmp.rgb * texture3_tmp.rgb);\n    o.a *= texture3_tmp.a;\n  #else\n    o *= texture3_tmp;\n  #endif\n  }\n  else if (textureId == 4) {\n  vec4 texture4_tmp = texture2D(texture4, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture4\n      texture4_tmp.a *= texture2D(texture4, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture4_tmp.rgb * texture4_tmp.rgb);\n    o.a *= texture4_tmp.a;\n  #else\n    o *= texture4_tmp;\n  #endif\n  }\n  #endif\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform TextureData {vec2 instanceDataTextureSize;};\nuniform sampler2D instanceDataTexture;\n#if CC_INSTANCE_TEXTURE_FLOAT32\n  mat4 getDataMatrix(const in float i) {\n    float width = instanceDataTextureSize.x;\n    float height = instanceDataTextureSize.y;\n    float j = i * 4.0;\n    float x = mod(j, width);\n    float y = floor(j / width);\n    float dx = 1.0 / width;\n    float dy = 1.0 / height;\n    y = dy * (y + 0.5);\n    vec4 v1 = texture(instanceDataTexture, vec2(dx * (x + 0.5), y));\n    vec4 v2 = texture(instanceDataTexture, vec2(dx * (x + 1.5), y));\n    vec4 v3 = texture(instanceDataTexture, vec2(dx * (x + 2.5), y));\n    vec4 v4 = texture(instanceDataTexture, vec2(dx * (x + 3.5), y));\n    return mat4(v1, v2, v3, v4);\n  }\n#else\n  float decode32(vec4 rgba) {\n    float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n    float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n    float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n    return Sign * exp2(Exponent - 23.0) * Mantissa;\n  }\n  vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n    return vec4(\n      decode32(x.wzyx * 255.0),\n      decode32(y.wzyx * 255.0),\n      decode32(z.wzyx * 255.0),\n      decode32(w.wzyx * 255.0)\n    );\n  }\n  vec4 decodevec4 (float dx, float x, float y) {\n    return decodevec4(\n      texture(instanceDataTexture, vec2(dx * (x + 0.5), y)),\n      texture(instanceDataTexture, vec2(dx * (x + 1.5), y)),\n      texture(instanceDataTexture, vec2(dx * (x + 2.5), y)),\n      texture(instanceDataTexture, vec2(dx * (x + 3.5), y))\n    );\n  }\n  mat4 getDataMatrix(const in float i) {\n    float width = instanceDataTextureSize.x;\n    float height = instanceDataTextureSize.y;\n    float j = i * 16.0;\n    float x = mod(j, width);\n    float y = floor(j / width);\n    float dx = 1.0 / width;\n    float dy = 1.0 / height;\n    y = dy * (y + 0.5);\n    vec4 v1 = decodevec4(dx, x,       y);\n    vec4 v2 = decodevec4(dx, x+4.0,   y);\n    vec4 v3 = decodevec4(dx, x+8.0,   y);\n    vec4 v4 = decodevec4(dx, x+12.0,  y);\n    return mat4(v1, v2, v3, v4);\n  }\n#endif\nfloat COS_PI2 = cos(6.28318530718);\nfloat SIN_PI2 = sin(6.28318530718);\nin float a_block_idx;\nout float v_texture_id;\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nstruct Mat23 {\n  float a;\n  float b;\n  float c;\n  float d;\n  float tx;\n  float ty;\n};\nMat23 mat23Mul (Mat23 a, Mat23 b) {\n  Mat23 res;\n  res.a = b.a * a.a + b.b * a.c;\n  res.b = b.a * a.b + b.b * a.d;\n  res.c = b.c * a.a + b.d * a.c;\n  res.d = b.c * a.b + b.d * a.d;\n  res.tx = a.a * b.tx + a.c * b.ty + a.tx;\n  res.ty = a.b * b.tx + a.d * b.ty + a.ty;\n  return res;\n}\nvec2 mat23Mul (Mat23 mat, vec2 pos) {\n  return vec2(\n    mat.a * pos.x + mat.b * pos.y + mat.tx,\n    mat.c * pos.x + mat.d * pos.y + mat.ty\n  );\n}\nvoid main () {\n  mat4 mat = getDataMatrix(a_block_idx);\n  vec4 a_uv_matrix = mat[0];\n  vec4 a_pos_local = mat[1];\n  vec4 a_pos_rotate_scale = mat[2];\n  vec2 a_pos_translate = mat[3].xy;\n  float a_uv_rotate = mat[3].z;\n  v_texture_id = mat[3].w;\n  vec4 pos = vec4(a_position, 1);\n  Mat23 local = Mat23(a_pos_local[2] - a_pos_local[0], 0., 0., a_pos_local[3] - a_pos_local[1], a_pos_local[0], a_pos_local[1]);\n  Mat23 world = Mat23(a_pos_rotate_scale[0], a_pos_rotate_scale[1], a_pos_rotate_scale[2], a_pos_rotate_scale[3], a_pos_translate[0], a_pos_translate[1]);\n  Mat23 res = mat23Mul(world, local);\n  pos.xy = mat23Mul(res, pos.xy);\n  pos = cc_matViewProj * pos;\n  float uvRotate = floor(a_uv_rotate + 0.5);\n  if (uvRotate == 0.) {\n    v_uv0 = a_uv_matrix.xy + (a_uv_matrix.zw - a_uv_matrix.xy) * a_position.xy;\n  }\n  else {\n    v_uv0 = a_uv_matrix.xy + (a_uv_matrix.zw - a_uv_matrix.xy) * a_position.yx;\n  }\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin float v_texture_id;\nin vec2 v_uv0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float textureId = floor(v_texture_id + 0.5);\n  #if TEXTURE_LEVEL > 0\n  if (textureId == 1.) {\n  vec4 texture1_tmp = texture(texture1, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture1\n      texture1_tmp.a *= texture(texture1, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture1_tmp.rgb * texture1_tmp.rgb);\n    o.a *= texture1_tmp.a;\n  #else\n    o *= texture1_tmp;\n  #endif\n  }\n  else if (textureId == 2.) {\n  vec4 texture2_tmp = texture(texture2, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture2\n      texture2_tmp.a *= texture(texture2, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture2_tmp.rgb * texture2_tmp.rgb);\n    o.a *= texture2_tmp.a;\n  #else\n    o *= texture2_tmp;\n  #endif\n  }\n  #endif\n  #if TEXTURE_LEVEL > 1\n  else if (textureId == 3.) {\n  vec4 texture3_tmp = texture(texture3, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture3\n      texture3_tmp.a *= texture(texture3, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture3_tmp.rgb * texture3_tmp.rgb);\n    o.a *= texture3_tmp.a;\n  #else\n    o *= texture3_tmp;\n  #endif\n  }\n  else if (textureId == 4) {\n  vec4 texture4_tmp = texture(texture4, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture4\n      texture4_tmp.a *= texture(texture4, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture4_tmp.rgb * texture4_tmp.rgb);\n    o.a *= texture4_tmp.a;\n  #else\n    o *= texture4_tmp;\n  #endif\n  }\n  #endif\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}